!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A0	num.h	13;"	d
A2	num.h	14;"	d
A3	num.h	15;"	d
A4	num.h	16;"	d
ABS	gram.c	/^     ABS = 261,$/;"	e	enum:yytokentype	file:
ABS	gram.c	233;"	d	file:
ABS	gram.h	/^     ABS = 261,$/;"	e	enum:yytokentype
ABS	gram.h	90;"	d
ACOS	gram.c	/^     ACOS = 270,$/;"	e	enum:yytokentype	file:
ACOS	gram.c	242;"	d	file:
ACOS	gram.h	/^     ACOS = 270,$/;"	e	enum:yytokentype
ACOS	gram.h	99;"	d
ACOSH	gram.c	/^     ACOSH = 276,$/;"	e	enum:yytokentype	file:
ACOSH	gram.c	248;"	d	file:
ACOSH	gram.h	/^     ACOSH = 276,$/;"	e	enum:yytokentype
ACOSH	gram.h	105;"	d
ADDRESS_FUNCTION	../lib/alloca.c	52;"	d	file:
ALIGN_SIZE	../lib/alloca.c	110;"	d	file:
ARG_NONE	../lib/display.c	31;"	d	file:
ARG_NONE	main.c	30;"	d	file:
ARG_OPTIONAL	../lib/display.c	33;"	d	file:
ARG_OPTIONAL	main.c	32;"	d	file:
ARG_REQUIRED	../lib/display.c	32;"	d	file:
ARG_REQUIRED	main.c	31;"	d	file:
ASIN	gram.c	/^     ASIN = 269,$/;"	e	enum:yytokentype	file:
ASIN	gram.c	241;"	d	file:
ASIN	gram.h	/^     ASIN = 269,$/;"	e	enum:yytokentype
ASIN	gram.h	98;"	d
ASINH	gram.c	/^     ASINH = 275,$/;"	e	enum:yytokentype	file:
ASINH	gram.c	247;"	d	file:
ASINH	gram.h	/^     ASINH = 275,$/;"	e	enum:yytokentype
ASINH	gram.h	104;"	d
ATAN	gram.c	/^     ATAN = 271,$/;"	e	enum:yytokentype	file:
ATAN	gram.c	243;"	d	file:
ATAN	gram.h	/^     ATAN = 271,$/;"	e	enum:yytokentype
ATAN	gram.h	100;"	d
ATANH	gram.c	/^     ATANH = 277,$/;"	e	enum:yytokentype	file:
ATANH	gram.c	249;"	d	file:
ATANH	gram.h	/^     ATANH = 277,$/;"	e	enum:yytokentype
ATANH	gram.h	106;"	d
A_ADAMS_MOULTON	ode.h	/^  A_EULER, A_ADAMS_MOULTON, A_RUNGE_KUTTA_FEHLBERG$/;"	e	enum:__anon4
A_EULER	ode.h	/^  A_EULER, A_ADAMS_MOULTON, A_RUNGE_KUTTA_FEHLBERG$/;"	e	enum:__anon4
A_RUNGE_KUTTA_FEHLBERG	ode.h	/^  A_EULER, A_ADAMS_MOULTON, A_RUNGE_KUTTA_FEHLBERG$/;"	e	enum:__anon4
B0	num.h	17;"	d
B2	num.h	18;"	d
B3	num.h	19;"	d
B4	num.h	20;"	d
B5	num.h	21;"	d
BEFORESTOP	stperr.c	97;"	d	file:
BEGIN	lex.c	125;"	d	file:
BINARY	gram.c	112;"	d	file:
C20	num.h	23;"	d
C2t	num.h	22;"	d
C30	num.h	25;"	d
C31	num.h	26;"	d
C3t	num.h	24;"	d
C40	num.h	28;"	d
C41	num.h	29;"	d
C42	num.h	30;"	d
C4t	num.h	27;"	d
C50	num.h	31;"	d
C51	num.h	32;"	d
C52	num.h	33;"	d
C53	num.h	34;"	d
C60	num.h	36;"	d
C61	num.h	37;"	d
C62	num.h	38;"	d
C63	num.h	39;"	d
C64	num.h	40;"	d
C6t	num.h	35;"	d
CEIL	gram.c	/^     CEIL = 279,$/;"	e	enum:yytokentype	file:
CEIL	gram.c	251;"	d	file:
CEIL	gram.h	/^     CEIL = 279,$/;"	e	enum:yytokentype
CEIL	gram.h	108;"	d
CEXFUNC	gram.c	147;"	d	file:
CEXOP	gram.c	141;"	d	file:
COMBINE	gram.c	107;"	d	file:
CONFUNC	gram.c	129;"	d	file:
COS	gram.c	/^     COS = 267,$/;"	e	enum:yytokentype	file:
COS	gram.c	239;"	d	file:
COS	gram.h	/^     COS = 267,$/;"	e	enum:yytokentype
COS	gram.h	96;"	d
COSH	gram.c	/^     COSH = 273,$/;"	e	enum:yytokentype	file:
COSH	gram.c	245;"	d	file:
COSH	gram.h	/^     COSH = 273,$/;"	e	enum:yytokentype
COSH	gram.h	102;"	d
CRAY_STACK	../lib/alloca.c	192;"	d	file:
ECHO	lex.c	708;"	d	file:
ECONST	num.h	12;"	d
EOB_ACT_CONTINUE_SCAN	lex.c	168;"	d	file:
EOB_ACT_END_OF_FILE	lex.c	169;"	d	file:
EOB_ACT_LAST_MATCH	lex.c	170;"	d	file:
ERF	gram.c	/^     ERF = 286,$/;"	e	enum:yytokentype	file:
ERF	gram.c	258;"	d	file:
ERF	gram.h	/^     ERF = 286,$/;"	e	enum:yytokentype
ERF	gram.h	115;"	d
ERFC	gram.c	/^     ERFC = 287,$/;"	e	enum:yytokentype	file:
ERFC	gram.c	259;"	d	file:
ERFC	gram.h	/^     ERFC = 287,$/;"	e	enum:yytokentype
ERFC	gram.h	116;"	d
EVERY	gram.c	/^     EVERY = 293,$/;"	e	enum:yytokentype	file:
EVERY	gram.c	265;"	d	file:
EVERY	gram.h	/^     EVERY = 293,$/;"	e	enum:yytokentype
EVERY	gram.h	122;"	d
EXAM	gram.c	/^     EXAM = 297,$/;"	e	enum:yytokentype	file:
EXAM	gram.c	269;"	d	file:
EXAM	gram.h	/^     EXAM = 297,$/;"	e	enum:yytokentype
EXAM	gram.h	126;"	d
EXP	gram.c	/^     EXP = 263,$/;"	e	enum:yytokentype	file:
EXP	gram.c	235;"	d	file:
EXP	gram.h	/^     EXP = 263,$/;"	e	enum:yytokentype
EXP	gram.h	92;"	d
FLEXINT_H	lex.c	29;"	d	file:
FLEX_BETA	lex.c	13;"	d	file:
FLEX_SCANNER	lex.c	8;"	d	file:
FLOOR	gram.c	/^     FLOOR = 278,$/;"	e	enum:yytokentype	file:
FLOOR	gram.c	250;"	d	file:
FLOOR	gram.h	/^     FLOOR = 278,$/;"	e	enum:yytokentype
FLOOR	gram.h	107;"	d
FROM	gram.c	/^     FROM = 294,$/;"	e	enum:yytokentype	file:
FROM	gram.c	266;"	d	file:
FROM	gram.h	/^     FROM = 294,$/;"	e	enum:yytokentype
FROM	gram.h	123;"	d
GAMMA	gram.c	/^     GAMMA = 285,$/;"	e	enum:yytokentype	file:
GAMMA	gram.c	257;"	d	file:
GAMMA	gram.h	/^     GAMMA = 285,$/;"	e	enum:yytokentype
GAMMA	gram.h	114;"	d
HALF	ode.h	128;"	d
HMAX	ode.h	131;"	d
HMIN	ode.h	130;"	d
HUGE_VAL	specfun.c	47;"	d	file:
HUGE_VAL	specfun.c	50;"	d	file:
HUGE_VAL	specfun.c	52;"	d	file:
IBETA	gram.c	/^     IBETA = 292,$/;"	e	enum:yytokentype	file:
IBETA	gram.c	264;"	d	file:
IBETA	gram.h	/^     IBETA = 292,$/;"	e	enum:yytokentype
IBETA	gram.h	121;"	d
IDENT	gram.c	/^     IDENT = 259,$/;"	e	enum:yytokentype	file:
IDENT	gram.c	231;"	d	file:
IDENT	gram.h	/^     IDENT = 259,$/;"	e	enum:yytokentype
IDENT	gram.h	88;"	d
IGAMMA	gram.c	/^     IGAMMA = 291,$/;"	e	enum:yytokentype	file:
IGAMMA	gram.c	263;"	d	file:
IGAMMA	gram.h	/^     IGAMMA = 291,$/;"	e	enum:yytokentype
IGAMMA	gram.h	120;"	d
INITIAL	lex.c	616;"	d	file:
INT16_MAX	lex.c	71;"	d	file:
INT16_MIN	lex.c	62;"	d	file:
INT32_MAX	lex.c	74;"	d	file:
INT32_MIN	lex.c	65;"	d	file:
INT8_MAX	lex.c	68;"	d	file:
INT8_MIN	lex.c	59;"	d	file:
INVERF	gram.c	/^     INVERF = 288,$/;"	e	enum:yytokentype	file:
INVERF	gram.c	260;"	d	file:
INVERF	gram.h	/^     INVERF = 288,$/;"	e	enum:yytokentype
INVERF	gram.h	117;"	d
INVNORM	gram.c	/^     INVNORM = 290,$/;"	e	enum:yytokentype	file:
INVNORM	gram.c	262;"	d	file:
INVNORM	gram.h	/^     INVNORM = 290,$/;"	e	enum:yytokentype
INVNORM	gram.h	119;"	d
ITMAX	specfun.c	23;"	d	file:
J0	gram.c	/^     J0 = 280,$/;"	e	enum:yytokentype	file:
J0	gram.c	252;"	d	file:
J0	gram.h	/^     J0 = 280,$/;"	e	enum:yytokentype
J0	gram.h	109;"	d
J1	gram.c	/^     J1 = 281,$/;"	e	enum:yytokentype	file:
J1	gram.c	253;"	d	file:
J1	gram.h	/^     J1 = 281,$/;"	e	enum:yytokentype
J1	gram.h	110;"	d
KMAX	ode.h	16;"	d
LASTVAL	misc.c	190;"	d	file:
LGAMMA	gram.c	/^     LGAMMA = 284,$/;"	e	enum:yytokentype	file:
LGAMMA	gram.c	256;"	d	file:
LGAMMA	gram.h	/^     LGAMMA = 284,$/;"	e	enum:yytokentype
LGAMMA	gram.h	113;"	d
LOG	gram.c	/^     LOG = 264,$/;"	e	enum:yytokentype	file:
LOG	gram.c	236;"	d	file:
LOG	gram.h	/^     LOG = 264,$/;"	e	enum:yytokentype
LOG	gram.h	93;"	d
LOG10	gram.c	/^     LOG10 = 265,$/;"	e	enum:yytokentype	file:
LOG10	gram.c	237;"	d	file:
LOG10	gram.h	/^     LOG10 = 265,$/;"	e	enum:yytokentype
LOG10	gram.h	94;"	d
LONGMAX	ode.h	132;"	d
MACHEPS	specfun.c	25;"	d	file:
MACHEPS	specfun.c	27;"	d	file:
MAX_FONTNAME_LEN	../lib/fontlist.c	38;"	d	file:
MESH	ode.h	133;"	d
MINEXP	specfun.c	30;"	d	file:
MINEXP	specfun.c	32;"	d	file:
M_LNPI	specfun.c	68;"	d	file:
M_LNSQRT2PI	specfun.c	69;"	d	file:
M_PI	specfun.c	61;"	d	file:
M_PI	specfun.c	63;"	d	file:
M_SQRT2	specfun.c	65;"	d	file:
M_SQRT2	specfun.c	67;"	d	file:
NAMMAX	ode.h	15;"	d
NEARSTOP	ama.c	21;"	d	file:
NORM	gram.c	/^     NORM = 289,$/;"	e	enum:yytokentype	file:
NORM	gram.c	261;"	d	file:
NORM	gram.h	/^     NORM = 289,$/;"	e	enum:yytokentype
NORM	gram.h	118;"	d
NSTACK	expr.c	19;"	d	file:
NUMBER	gram.c	/^     NUMBER = 258,$/;"	e	enum:yytokentype	file:
NUMBER	gram.c	230;"	d	file:
NUMBER	gram.h	/^     NUMBER = 258,$/;"	e	enum:yytokentype
NUMBER	gram.h	87;"	d
OFLOW	specfun.c	35;"	d	file:
OFLOW	specfun.c	37;"	d	file:
ONECON	gram.c	102;"	d	file:
O_ABS	ode.h	/^  O_NEG, O_ABS, O_SINH, O_COSH, O_TANH, O_ASINH, O_ACOSH, O_ATANH, O_SQAR,$/;"	e	enum:__anon3
O_ACOS	ode.h	/^  O_LOG10, O_SIN, O_COS, O_TAN, O_ASIN, O_ACOS, O_ATAN, O_IDENT, O_CONST,$/;"	e	enum:__anon3
O_ACOSH	ode.h	/^  O_NEG, O_ABS, O_SINH, O_COSH, O_TANH, O_ASINH, O_ACOSH, O_ATANH, O_SQAR,$/;"	e	enum:__anon3
O_ASIN	ode.h	/^  O_LOG10, O_SIN, O_COS, O_TAN, O_ASIN, O_ACOS, O_ATAN, O_IDENT, O_CONST,$/;"	e	enum:__anon3
O_ASINH	ode.h	/^  O_NEG, O_ABS, O_SINH, O_COSH, O_TANH, O_ASINH, O_ACOSH, O_ATANH, O_SQAR,$/;"	e	enum:__anon3
O_ATAN	ode.h	/^  O_LOG10, O_SIN, O_COS, O_TAN, O_ASIN, O_ACOS, O_ATAN, O_IDENT, O_CONST,$/;"	e	enum:__anon3
O_ATANH	ode.h	/^  O_NEG, O_ABS, O_SINH, O_COSH, O_TANH, O_ASINH, O_ACOSH, O_ATANH, O_SQAR,$/;"	e	enum:__anon3
O_CALL	ode.h	/^  ,O_CALL, O_STARTFUN, O_ENDFUN$/;"	e	enum:__anon3
O_CEIL	ode.h	/^  O_CUBE, O_INV, O_FLOOR, O_CEIL, O_J0, O_J1, O_Y0, O_Y1, O_ERF, O_ERFC,$/;"	e	enum:__anon3
O_CONST	ode.h	/^  O_LOG10, O_SIN, O_COS, O_TAN, O_ASIN, O_ACOS, O_ATAN, O_IDENT, O_CONST,$/;"	e	enum:__anon3
O_COS	ode.h	/^  O_LOG10, O_SIN, O_COS, O_TAN, O_ASIN, O_ACOS, O_ATAN, O_IDENT, O_CONST,$/;"	e	enum:__anon3
O_COSH	ode.h	/^  O_NEG, O_ABS, O_SINH, O_COSH, O_TANH, O_ASINH, O_ACOSH, O_ATANH, O_SQAR,$/;"	e	enum:__anon3
O_CUBE	ode.h	/^  O_CUBE, O_INV, O_FLOOR, O_CEIL, O_J0, O_J1, O_Y0, O_Y1, O_ERF, O_ERFC,$/;"	e	enum:__anon3
O_DIV	ode.h	/^  O_NOOP, O_PLUS, O_MINUS, O_MULT, O_DIV, O_POWER, O_SQRT, O_EXP, O_LOG,$/;"	e	enum:__anon3
O_ENDFUN	ode.h	/^  ,O_CALL, O_STARTFUN, O_ENDFUN$/;"	e	enum:__anon3
O_ERF	ode.h	/^  O_CUBE, O_INV, O_FLOOR, O_CEIL, O_J0, O_J1, O_Y0, O_Y1, O_ERF, O_ERFC,$/;"	e	enum:__anon3
O_ERFC	ode.h	/^  O_CUBE, O_INV, O_FLOOR, O_CEIL, O_J0, O_J1, O_Y0, O_Y1, O_ERF, O_ERFC,$/;"	e	enum:__anon3
O_EXP	ode.h	/^  O_NOOP, O_PLUS, O_MINUS, O_MULT, O_DIV, O_POWER, O_SQRT, O_EXP, O_LOG,$/;"	e	enum:__anon3
O_FLOOR	ode.h	/^  O_CUBE, O_INV, O_FLOOR, O_CEIL, O_J0, O_J1, O_Y0, O_Y1, O_ERF, O_ERFC,$/;"	e	enum:__anon3
O_GAMMA	ode.h	/^  O_INVERF, O_LGAMMA, O_GAMMA, O_NORM, O_INVNORM, O_IGAMMA, O_IBETA$/;"	e	enum:__anon3
O_IBETA	ode.h	/^  O_INVERF, O_LGAMMA, O_GAMMA, O_NORM, O_INVNORM, O_IGAMMA, O_IBETA$/;"	e	enum:__anon3
O_IDENT	ode.h	/^  O_LOG10, O_SIN, O_COS, O_TAN, O_ASIN, O_ACOS, O_ATAN, O_IDENT, O_CONST,$/;"	e	enum:__anon3
O_IGAMMA	ode.h	/^  O_INVERF, O_LGAMMA, O_GAMMA, O_NORM, O_INVNORM, O_IGAMMA, O_IBETA$/;"	e	enum:__anon3
O_INV	ode.h	/^  O_CUBE, O_INV, O_FLOOR, O_CEIL, O_J0, O_J1, O_Y0, O_Y1, O_ERF, O_ERFC,$/;"	e	enum:__anon3
O_INVERF	ode.h	/^  O_INVERF, O_LGAMMA, O_GAMMA, O_NORM, O_INVNORM, O_IGAMMA, O_IBETA$/;"	e	enum:__anon3
O_INVNORM	ode.h	/^  O_INVERF, O_LGAMMA, O_GAMMA, O_NORM, O_INVNORM, O_IGAMMA, O_IBETA$/;"	e	enum:__anon3
O_J0	ode.h	/^  O_CUBE, O_INV, O_FLOOR, O_CEIL, O_J0, O_J1, O_Y0, O_Y1, O_ERF, O_ERFC,$/;"	e	enum:__anon3
O_J1	ode.h	/^  O_CUBE, O_INV, O_FLOOR, O_CEIL, O_J0, O_J1, O_Y0, O_Y1, O_ERF, O_ERFC,$/;"	e	enum:__anon3
O_LGAMMA	ode.h	/^  O_INVERF, O_LGAMMA, O_GAMMA, O_NORM, O_INVNORM, O_IGAMMA, O_IBETA$/;"	e	enum:__anon3
O_LOG	ode.h	/^  O_NOOP, O_PLUS, O_MINUS, O_MULT, O_DIV, O_POWER, O_SQRT, O_EXP, O_LOG,$/;"	e	enum:__anon3
O_LOG10	ode.h	/^  O_LOG10, O_SIN, O_COS, O_TAN, O_ASIN, O_ACOS, O_ATAN, O_IDENT, O_CONST,$/;"	e	enum:__anon3
O_MINUS	ode.h	/^  O_NOOP, O_PLUS, O_MINUS, O_MULT, O_DIV, O_POWER, O_SQRT, O_EXP, O_LOG,$/;"	e	enum:__anon3
O_MULT	ode.h	/^  O_NOOP, O_PLUS, O_MINUS, O_MULT, O_DIV, O_POWER, O_SQRT, O_EXP, O_LOG,$/;"	e	enum:__anon3
O_NEG	ode.h	/^  O_NEG, O_ABS, O_SINH, O_COSH, O_TANH, O_ASINH, O_ACOSH, O_ATANH, O_SQAR,$/;"	e	enum:__anon3
O_NOOP	ode.h	/^  O_NOOP, O_PLUS, O_MINUS, O_MULT, O_DIV, O_POWER, O_SQRT, O_EXP, O_LOG,$/;"	e	enum:__anon3
O_NORM	ode.h	/^  O_INVERF, O_LGAMMA, O_GAMMA, O_NORM, O_INVNORM, O_IGAMMA, O_IBETA$/;"	e	enum:__anon3
O_PLUS	ode.h	/^  O_NOOP, O_PLUS, O_MINUS, O_MULT, O_DIV, O_POWER, O_SQRT, O_EXP, O_LOG,$/;"	e	enum:__anon3
O_POWER	ode.h	/^  O_NOOP, O_PLUS, O_MINUS, O_MULT, O_DIV, O_POWER, O_SQRT, O_EXP, O_LOG,$/;"	e	enum:__anon3
O_SIN	ode.h	/^  O_LOG10, O_SIN, O_COS, O_TAN, O_ASIN, O_ACOS, O_ATAN, O_IDENT, O_CONST,$/;"	e	enum:__anon3
O_SINH	ode.h	/^  O_NEG, O_ABS, O_SINH, O_COSH, O_TANH, O_ASINH, O_ACOSH, O_ATANH, O_SQAR,$/;"	e	enum:__anon3
O_SQAR	ode.h	/^  O_NEG, O_ABS, O_SINH, O_COSH, O_TANH, O_ASINH, O_ACOSH, O_ATANH, O_SQAR,$/;"	e	enum:__anon3
O_SQRT	ode.h	/^  O_NOOP, O_PLUS, O_MINUS, O_MULT, O_DIV, O_POWER, O_SQRT, O_EXP, O_LOG,$/;"	e	enum:__anon3
O_STARTFUN	ode.h	/^  ,O_CALL, O_STARTFUN, O_ENDFUN$/;"	e	enum:__anon3
O_TAN	ode.h	/^  O_LOG10, O_SIN, O_COS, O_TAN, O_ASIN, O_ACOS, O_ATAN, O_IDENT, O_CONST,$/;"	e	enum:__anon3
O_TANH	ode.h	/^  O_NEG, O_ABS, O_SINH, O_COSH, O_TANH, O_ASINH, O_ACOSH, O_ATANH, O_SQAR,$/;"	e	enum:__anon3
O_Y0	ode.h	/^  O_CUBE, O_INV, O_FLOOR, O_CEIL, O_J0, O_J1, O_Y0, O_Y1, O_ERF, O_ERFC,$/;"	e	enum:__anon3
O_Y1	ode.h	/^  O_CUBE, O_INV, O_FLOOR, O_CEIL, O_J0, O_J1, O_Y0, O_Y1, O_ERF, O_ERFC,$/;"	e	enum:__anon3
PASTMAX	ode.h	17;"	d
PASTSTOP	stperr.c	95;"	d	file:
PASTVAL	am.c	18;"	d	file:
PASTVAL	ama.c	19;"	d	file:
PERMUTE	../lib/getopt.c	/^  REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER$/;"	e	enum:__anon6	file:
PI_ON_FOUR	bessel.c	46;"	d	file:
PI_ON_TWO	bessel.c	47;"	d	file:
PRFROM	misc.c	192;"	d	file:
PRINT	gram.c	/^     PRINT = 295,$/;"	e	enum:yytokentype	file:
PRINT	gram.c	267;"	d	file:
PRINT	gram.h	/^     PRINT = 295,$/;"	e	enum:yytokentype
PRINT	gram.h	124;"	d
P_ABERR	ode.h	/^  P_VALUE, P_PRIME, P_SSERR, P_ACERR, P_ABERR$/;"	e	enum:__anon1
P_ACERR	ode.h	/^  P_VALUE, P_PRIME, P_SSERR, P_ACERR, P_ABERR$/;"	e	enum:__anon1
P_EXPR	ode.h	/^  , P_EXPR$/;"	e	enum:__anon1
P_PRIME	ode.h	/^  P_VALUE, P_PRIME, P_SSERR, P_ACERR, P_ABERR$/;"	e	enum:__anon1
P_SSERR	ode.h	/^  P_VALUE, P_PRIME, P_SSERR, P_ACERR, P_ABERR$/;"	e	enum:__anon1
P_VALUE	ode.h	/^  P_VALUE, P_PRIME, P_SSERR, P_ACERR, P_ABERR$/;"	e	enum:__anon1
REJECT	lex.c	588;"	d	file:
REQUIRE_ORDER	../lib/getopt.c	/^  REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER$/;"	e	enum:__anon6	file:
RETURN_IN_ORDER	../lib/getopt.c	/^  REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER$/;"	e	enum:__anon6	file:
SCALE	ode.h	129;"	d
SEP	gram.c	/^     SEP = 260,$/;"	e	enum:yytokentype	file:
SEP	gram.c	232;"	d	file:
SEP	gram.h	/^     SEP = 260,$/;"	e	enum:yytokentype
SEP	gram.h	89;"	d
SF_DEPV	ode.h	45;"	d
SF_INIT	ode.h	43;"	d
SF_ISEQN	ode.h	44;"	d
SF_ISFARG	ode.h	46;"	d
SF_ISFUNC	ode.h	47;"	d
SIGNGAM	specfun.c	/^static int SIGNGAM;$/;"	v	file:
SIGNGAM	specfun.c	83;"	d	file:
SIGNGAM	specfun.c	89;"	d	file:
SIN	gram.c	/^     SIN = 266,$/;"	e	enum:yytokentype	file:
SIN	gram.c	238;"	d	file:
SIN	gram.h	/^     SIN = 266,$/;"	e	enum:yytokentype
SIN	gram.h	95;"	d
SINH	gram.c	/^     SINH = 272,$/;"	e	enum:yytokentype	file:
SINH	gram.c	244;"	d	file:
SINH	gram.h	/^     SINH = 272,$/;"	e	enum:yytokentype
SINH	gram.h	101;"	d
SQRT	gram.c	/^     SQRT = 262,$/;"	e	enum:yytokentype	file:
SQRT	gram.c	234;"	d	file:
SQRT	gram.h	/^     SQRT = 262,$/;"	e	enum:yytokentype
SQRT	gram.h	91;"	d
STACKSIZE	stack.c	3;"	d	file:
STACK_DIR	../lib/alloca.c	71;"	d	file:
STACK_DIR	../lib/alloca.c	76;"	d	file:
STACK_DIRECTION	../lib/alloca.c	66;"	d	file:
STEP	gram.c	/^     STEP = 296,$/;"	e	enum:yytokentype	file:
STEP	gram.c	268;"	d	file:
STEP	gram.h	/^     STEP = 296,$/;"	e	enum:yytokentype
STEP	gram.h	125;"	d
STOPA	ode.h	136;"	d
STOPR	ode.h	134;"	d
SYMTAB	gram.c	/^     SYMTAB = 298,$/;"	e	enum:yytokentype	file:
SYMTAB	gram.c	270;"	d	file:
SYMTAB	gram.h	/^     SYMTAB = 298,$/;"	e	enum:yytokentype
SYMTAB	gram.h	127;"	d
TAN	gram.c	/^     TAN = 268,$/;"	e	enum:yytokentype	file:
TAN	gram.c	240;"	d	file:
TAN	gram.h	/^     TAN = 268,$/;"	e	enum:yytokentype
TAN	gram.h	97;"	d
TANH	gram.c	/^     TANH = 274,$/;"	e	enum:yytokentype	file:
TANH	gram.c	246;"	d	file:
TANH	gram.h	/^     TANH = 274,$/;"	e	enum:yytokentype
TANH	gram.h	103;"	d
TERNARY	gram.c	120;"	d	file:
TFROM	misc.c	191;"	d	file:
THREECON	gram.c	97;"	d	file:
THREE_PI_ON_FOUR	bessel.c	48;"	d	file:
TWO	ode.h	127;"	d
TWOCON	gram.c	96;"	d	file:
TWO_ON_PI	bessel.c	49;"	d	file:
T_LT_TSTOP	ama.c	20;"	d	file:
T_LT_TSTOP	rka.c	20;"	d	file:
UINT16_MAX	lex.c	80;"	d	file:
UINT32_MAX	lex.c	83;"	d	file:
UINT8_MAX	lex.c	77;"	d	file:
UMINUS	gram.c	/^     UMINUS = 299$/;"	e	enum:yytokentype	file:
UMINUS	gram.c	271;"	d	file:
UMINUS	gram.h	/^     UMINUS = 299$/;"	e	enum:yytokentype
UMINUS	gram.h	128;"	d
UNARY	gram.c	134;"	d	file:
XBIG	specfun.c	40;"	d	file:
XBIG	specfun.c	42;"	d	file:
Y0	gram.c	/^     Y0 = 282,$/;"	e	enum:yytokentype	file:
Y0	gram.c	254;"	d	file:
Y0	gram.h	/^     Y0 = 282,$/;"	e	enum:yytokentype
Y0	gram.h	111;"	d
Y1	gram.c	/^     Y1 = 283,$/;"	e	enum:yytokentype	file:
Y1	gram.c	255;"	d	file:
Y1	gram.h	/^     Y1 = 283,$/;"	e	enum:yytokentype
Y1	gram.h	112;"	d
YYABORT	gram.c	1091;"	d	file:
YYACCEPT	gram.c	1090;"	d	file:
YYBACKUP	gram.c	1103;"	d	file:
YYBISON	gram.c	46;"	d	file:
YYBISON_VERSION	gram.c	49;"	d	file:
YYCOPY	gram.c	484;"	d	file:
YYCOPY	gram.c	487;"	d	file:
YYDEBUG	gram.c	162;"	d	file:
YYDPRINTF	gram.c	1183;"	d	file:
YYDPRINTF	gram.c	1332;"	d	file:
YYEMPTY	gram.c	1087;"	d	file:
YYEOF	gram.c	1088;"	d	file:
YYERRCODE	gram.c	1122;"	d	file:
YYERROR	gram.c	1092;"	d	file:
YYERROR_VERBOSE	gram.c	167;"	d	file:
YYERROR_VERBOSE	gram.c	168;"	d	file:
YYERROR_VERBOSE	gram.c	170;"	d	file:
YYFAIL	gram.c	1099;"	d	file:
YYFINAL	gram.c	517;"	d	file:
YYFPRINTF	gram.c	1180;"	d	file:
YYFREE	gram.c	450;"	d	file:
YYID	gram.c	/^YYID (int yyi)$/;"	f	file:
YYID	gram.c	374;"	d	file:
YYINITDEPTH	gram.c	1341;"	d	file:
YYLAST	gram.c	519;"	d	file:
YYLEX	gram.c	1170;"	d	file:
YYLEX	gram.c	1172;"	d	file:
YYLLOC_DEFAULT	gram.c	1131;"	d	file:
YYLSP_NEEDED	gram.c	64;"	d	file:
YYMALLOC	gram.c	443;"	d	file:
YYMAXDEPTH	gram.c	1352;"	d	file:
YYMAXUTOK	gram.c	532;"	d	file:
YYNNTS	gram.c	524;"	d	file:
YYNRULES	gram.c	526;"	d	file:
YYNSTATES	gram.c	528;"	d	file:
YYNTOKENS	gram.c	522;"	d	file:
YYPACT_NINF	gram.c	782;"	d	file:
YYPOPSTACK	gram.c	1692;"	d	file:
YYPULL	gram.c	61;"	d	file:
YYPURE	gram.c	55;"	d	file:
YYPUSH	gram.c	58;"	d	file:
YYRECOVERING	gram.c	1101;"	d	file:
YYRHSLOC	gram.c	1129;"	d	file:
YYSIZE_MAXIMUM	gram.c	351;"	d	file:
YYSIZE_T	gram.c	339;"	d	file:
YYSIZE_T	gram.c	341;"	d	file:
YYSIZE_T	gram.c	345;"	d	file:
YYSIZE_T	gram.c	347;"	d	file:
YYSKELETON_NAME	gram.c	52;"	d	file:
YYSTACK_ALLOC	gram.c	397;"	d	file:
YYSTACK_ALLOC	gram.c	401;"	d	file:
YYSTACK_ALLOC	gram.c	406;"	d	file:
YYSTACK_ALLOC	gram.c	429;"	d	file:
YYSTACK_ALLOC_MAXIMUM	gram.c	426;"	d	file:
YYSTACK_ALLOC_MAXIMUM	gram.c	432;"	d	file:
YYSTACK_BYTES	gram.c	476;"	d	file:
YYSTACK_FREE	gram.c	420;"	d	file:
YYSTACK_FREE	gram.c	430;"	d	file:
YYSTACK_GAP_MAXIMUM	gram.c	472;"	d	file:
YYSTACK_RELOCATE	gram.c	503;"	d	file:
YYSTATE	lex.c	132;"	d	file:
YYSTYPE	gram.c	/^typedef union YYSTYPE$/;"	u	file:
YYSTYPE	gram.c	/^} YYSTYPE;$/;"	t	typeref:union:YYSTYPE	file:
YYSTYPE	gram.h	/^typedef union YYSTYPE$/;"	u
YYSTYPE	gram.h	/^} YYSTYPE;$/;"	t	typeref:union:YYSTYPE
YYSTYPE_IS_DECLARED	gram.c	296;"	d	file:
YYSTYPE_IS_DECLARED	gram.h	153;"	d
YYSTYPE_IS_TRIVIAL	gram.c	294;"	d	file:
YYSTYPE_IS_TRIVIAL	gram.h	151;"	d
YYTABLES_NAME	lex.c	2182;"	d	file:
YYTABLE_NINF	gram.c	835;"	d	file:
YYTERROR	gram.c	1121;"	d	file:
YYTOKENTYPE	gram.c	181;"	d	file:
YYTOKENTYPE	gram.h	38;"	d
YYTOKEN_TABLE	gram.c	175;"	d	file:
YYTRANSLATE	gram.c	534;"	d	file:
YYUNDEFTOK	gram.c	531;"	d	file:
YYUSE	gram.c	367;"	d	file:
YYUSE	gram.c	369;"	d	file:
YY_	gram.c	357;"	d	file:
YY_	gram.c	361;"	d	file:
YY_AT_BOL	lex.c	339;"	d	file:
YY_BREAK	lex.c	787;"	d	file:
YY_BUFFER_EOF_PENDING	lex.c	255;"	d	file:
YY_BUFFER_NEW	lex.c	243;"	d	file:
YY_BUFFER_NORMAL	lex.c	244;"	d	file:
YY_BUFFER_STATE	lex.c	/^typedef struct yy_buffer_state *YY_BUFFER_STATE;$/;"	t	typeref:struct:yy_buffer_state	file:
YY_BUF_SIZE	lex.c	149;"	d	file:
YY_BUF_SIZE	lex.c	151;"	d	file:
YY_CHAR	lex.c	/^typedef unsigned char YY_CHAR;$/;"	t	file:
YY_CURRENT_BUFFER	lex.c	271;"	d	file:
YY_CURRENT_BUFFER_LVALUE	lex.c	278;"	d	file:
YY_DECL	lex.c	775;"	d	file:
YY_DECL_IS_OURS	lex.c	771;"	d	file:
YY_DO_BEFORE_ACTION	lex.c	364;"	d	file:
YY_END_OF_BUFFER	lex.c	372;"	d	file:
YY_END_OF_BUFFER_CHAR	lex.c	140;"	d	file:
YY_EXIT_FAILURE	lex.c	1972;"	d	file:
YY_EXTRA_TYPE	lex.c	627;"	d	file:
YY_FATAL_ERROR	lex.c	762;"	d	file:
YY_FLEX_MAJOR_VERSION	lex.c	9;"	d	file:
YY_FLEX_MINOR_VERSION	lex.c	10;"	d	file:
YY_FLEX_SUBMINOR_VERSION	lex.c	11;"	d	file:
YY_FLUSH_BUFFER	lex.c	307;"	d	file:
YY_INPUT	lex.c	715;"	d	file:
YY_INT_ALIGNED	lex.c	4;"	d	file:
YY_LESS_LINENO	lex.c	172;"	d	file:
YY_LOCATION_PRINT	gram.c	1157;"	d	file:
YY_LOCATION_PRINT	gram.c	1162;"	d	file:
YY_MORE_ADJ	lex.c	597;"	d	file:
YY_NEW_FILE	lex.c	138;"	d	file:
YY_NULL	lex.c	112;"	d	file:
YY_NUM_RULES	lex.c	371;"	d	file:
YY_READ_BUF_SIZE	lex.c	697;"	d	file:
YY_READ_BUF_SIZE	lex.c	699;"	d	file:
YY_REDUCE_PRINT	gram.c	1322;"	d	file:
YY_REDUCE_PRINT	gram.c	1335;"	d	file:
YY_RESTORE_YY_MORE_OFFSET	lex.c	598;"	d	file:
YY_RULE_SETUP	lex.c	790;"	d	file:
YY_SC_TO_UI	lex.c	119;"	d	file:
YY_STACK_PRINT	gram.c	1284;"	d	file:
YY_STACK_PRINT	gram.c	1334;"	d	file:
YY_START	lex.c	131;"	d	file:
YY_START_STACK_INCR	lex.c	757;"	d	file:
YY_STATE_BUF_SIZE	lex.c	157;"	d	file:
YY_STATE_EOF	lex.c	135;"	d	file:
YY_STRUCT_YY_BUFFER_STATE	lex.c	196;"	d	file:
YY_SYMBOL_PRINT	gram.c	1189;"	d	file:
YY_SYMBOL_PRINT	gram.c	1333;"	d	file:
YY_TYPEDEF_YY_BUFFER_STATE	lex.c	160;"	d	file:
YY_TYPEDEF_YY_SIZE_T	lex.c	191;"	d	file:
YY_USER_ACTION	lex.c	782;"	d	file:
YY_USE_CONST	lex.c	100;"	d	file:
YY_USE_CONST	lex.c	93;"	d	file:
_STDLIB_H	gram.c	411;"	d	file:
_STDLIB_H	gram.c	439;"	d	file:
__BEGIN_DECLS	extern.h	144;"	d
__BEGIN_DECLS	extern.h	150;"	d
__BEGIN_DECLS	extern.h	153;"	d
__END_DECLS	extern.h	147;"	d
__END_DECLS	extern.h	151;"	d
__END_DECLS	extern.h	154;"	d
__STDC_LIMIT_MACROS	lex.c	39;"	d	file:
_getopt_initialize	../lib/getopt.c	/^_getopt_initialize (const char *optstring)$/;"	f	file:
_getopt_internal	../lib/getopt.c	/^_getopt_internal (int argc, char *const *argv, const char *optstring, $/;"	f
_known_devices	../lib/fontlist.c	/^static const char *_known_devices[] =$/;"	v	file:
_x_retrieve_font	../lib/alloca.c	/^_x_retrieve_font (void)$/;"	f	file:
a	specfun.c	/^static const double a[] = $/;"	v	file:
abemax	stperr.c	/^static double   ssemax, abemax, acemax;$/;"	v	file:
abenam	stperr.c	/^static char     *ssenam, *abenam, *acenam;$/;"	v	file:
abmax	global.c	/^double	abmax	= 1e36;$/;"	v
abmin	global.c	/^double	abmin	= 1e-36;$/;"	v
acemax	stperr.c	/^static double   ssemax, abemax, acemax;$/;"	v	file:
acenam	stperr.c	/^static char     *ssenam, *abenam, *acenam;$/;"	v	file:
acmax	global.c	/^double	acmax	= 1e36;$/;"	v
algorithm	global.c	/^integration_type algorithm = A_RUNGE_KUTTA_FEHLBERG;$/;"	v
align	../lib/alloca.c	/^  char align[ALIGN_SIZE];	\/* To force sizeof(header).  *\/$/;"	m	union:hdr	file:
alloca	../lib/alloca.c	/^alloca (unsigned size)$/;"	f
alloca	gram.c	404;"	d	file:
am	am.c	/^am (void)$/;"	f
ama	ama.c	/^ama (void)$/;"	f
basic	../lib/fontlist.c	/^  bool basic;			\/* basic stick font (supp. on all devices)? *\/$/;"	m	struct:plStickFontInfoStruct	file:
callstack	global.c	/^struct  pstack	*callstack = NULL; \/\/ agre$/;"	v	typeref:struct:pstack
cexpr	gram.y	/^cexpr           : '(' cexpr ')'$/;"	l
chars	../lib/fontlist.c	/^  short chars[256];		\/* array of vector glyphs *\/$/;"	m	struct:plHersheyFontInfoStruct	file:
check	misc.c	/^check (void)$/;"	f
concat	gram.c	/^concat (struct expr *e0, struct expr *e1)$/;"	f
conflag	global.c	/^bool     eflag = false, rflag = false, hflag = false, conflag = false;$/;"	v
confrac	specfun.c	/^confrac (double a, double b, double x)$/;"	f	file:
copyright	global.c	/^const char    *copyright = "Copyright (C) 1994 Nicholas B. Tufillaro,\\nCopyright (C) 2005 Free Software Foundation, Inc.";$/;"	v
css_family	../lib/fontlist.c	/^  const char *css_family;	\/* CSS font family *\/$/;"	m	struct:plPCLFontInfoStruct	file:
css_family	../lib/fontlist.c	/^  const char *css_family;	\/* CSS font family *\/$/;"	m	struct:plPSFontInfoStruct	file:
css_generic_family	../lib/fontlist.c	/^  const char *css_generic_family; \/* CSS generic font family *\/$/;"	m	struct:plPCLFontInfoStruct	file:
css_generic_family	../lib/fontlist.c	/^  const char *css_generic_family; \/* CSS generic font family *\/$/;"	m	struct:plPSFontInfoStruct	file:
css_stretch	../lib/fontlist.c	/^  const char *css_stretch;	\/* CSS font stretch *\/$/;"	m	struct:plPCLFontInfoStruct	file:
css_stretch	../lib/fontlist.c	/^  const char *css_stretch;	\/* CSS font stretch *\/$/;"	m	struct:plPSFontInfoStruct	file:
css_style	../lib/fontlist.c	/^  const char *css_style;	\/* CSS font style *\/$/;"	m	struct:plPCLFontInfoStruct	file:
css_style	../lib/fontlist.c	/^  const char *css_style;	\/* CSS font style *\/$/;"	m	struct:plPSFontInfoStruct	file:
css_weight	../lib/fontlist.c	/^  const char *css_weight;	\/* CSS font weight *\/$/;"	m	struct:plPCLFontInfoStruct	file:
css_weight	../lib/fontlist.c	/^  const char *css_weight;	\/* CSS font weight *\/$/;"	m	struct:plPSFontInfoStruct	file:
curline	lex.c	/^int curline = 1;$/;"	v
current_address	../lib/alloca.c	/^    long current_address;	\/* Current stack segment address.  *\/$/;"	m	struct:stk_stat	file:
current_size	../lib/alloca.c	/^    long current_size;		\/* Current stack segment size.  This$/;"	m	struct:stk_stat	file:
deep	../lib/alloca.c	/^      char *deep;		\/* For stack depth measure.  *\/$/;"	m	struct:hdr::__anon5	file:
defalt	misc.c	/^defalt (void)$/;"	f
display_fonts	../lib/fontlist.c	/^display_fonts (const char *output_format, const char *progname)$/;"	f
display_usage	../lib/display.c	/^display_usage (const char *progname, const int *omit_vals, const char *appendage, bool fonts)$/;"	f
display_version	../lib/display.c	/^display_version (const char *progname, const char *written, const char *copyright)$/;"	f
dqueue	global.c	/^struct	sym	*dqueue	= NULL;$/;"	v	typeref:struct:sym
dzero	bessel.c	/^static const double dzero = 0.0;$/;"	v	file:
ealloc	expr.c	/^ealloc (void)$/;"	f
eflag	global.c	/^bool     eflag = false, rflag = false, hflag = false, conflag = false;$/;"	v
efree	expr.c	/^efree (struct expr *ep)$/;"	f
elementp	../lib/display.c	/^elementp (int item, const int *list)$/;"	f
ent_cell	ode.h	/^} ent_cell;$/;"	t	typeref:enum:__anon1
erf	specfun.c	/^erf (double x)$/;"	f
erfc	specfun.c	/^erfc (double x)$/;"	f
erritem	gram.c	/^bool erritem;$/;"	v
errmess	gram.c	/^static  char    *errmess = NULL;$/;"	v	file:
eu	eu.c	/^eu (void)$/;"	f
eval	expr.c	/^eval (const struct expr *ep)$/;"	f
ex_next	ode.h	/^  struct expr    *ex_next;$/;"	m	struct:expr	typeref:struct:expr::expr
ex_oper	ode.h	/^  op_type        ex_oper;$/;"	m	struct:expr
ex_sym	ode.h	/^  struct sym     *ex_sym;$/;"	m	struct:expr	typeref:struct:expr::sym
ex_value	ode.h	/^  double         ex_value;$/;"	m	struct:expr
exchange	../lib/getopt.c	/^exchange (char **argv)$/;"	f	file:
expr	gram.y	/^expr            : '(' expr ')'$/;"	l
expr	ode.h	/^struct expr $/;"	s
exprone	global.c	/^struct	expr	exprone = $/;"	v	typeref:struct:expr
exprptr	gram.c	/^        struct  expr    *exprptr;$/;"	m	union:YYSTYPE	typeref:struct:YYSTYPE::expr	file:
exprptr	gram.h	/^        struct  expr    *exprptr;$/;"	m	union:YYSTYPE	typeref:struct:YYSTYPE::expr
exprzero	global.c	/^struct	expr	exprzero  = $/;"	v	typeref:struct:expr
extends	../lib/alloca.c	/^    long extends;		\/* Number of block extensions.  *\/$/;"	m	struct:stk_stat	file:
f_gamma	specfun.c	/^f_gamma (double x)$/;"	f
f_lgamma	specfun.c	/^f_lgamma (double z)$/;"	f
fargs	gram.y	/^fargs	:	\/* empty *\/ { $$=NULL; }$/;"	l
fargsitem	gram.y	/^fargsitem	: IDENT$/;"	l
fatal	main.c	/^fatal (const char *s)$/;"	f	file:
field	misc.c	/^field(void)$/;"	f
fig_id	../lib/fontlist.c	/^  int fig_id;			\/* Fig's font id *\/$/;"	m	struct:plPSFontInfoStruct	file:
filename	global.c	/^char	*filename;$/;"	v
first_nonopt	../lib/getopt.c	/^static int first_nonopt;$/;"	v	file:
flex_int16_t	lex.c	/^typedef int16_t flex_int16_t;$/;"	t	file:
flex_int16_t	lex.c	/^typedef short int flex_int16_t;$/;"	t	file:
flex_int32_t	lex.c	/^typedef int flex_int32_t;$/;"	t	file:
flex_int32_t	lex.c	/^typedef int32_t flex_int32_t;$/;"	t	file:
flex_int8_t	lex.c	/^typedef int8_t flex_int8_t;$/;"	t	file:
flex_int8_t	lex.c	/^typedef signed char flex_int8_t;$/;"	t	file:
flex_uint16_t	lex.c	/^typedef uint16_t flex_uint16_t;$/;"	t	file:
flex_uint16_t	lex.c	/^typedef unsigned short int flex_uint16_t;$/;"	t	file:
flex_uint32_t	lex.c	/^typedef uint32_t flex_uint32_t;$/;"	t	file:
flex_uint32_t	lex.c	/^typedef unsigned int flex_uint32_t;$/;"	t	file:
flex_uint8_t	lex.c	/^typedef uint8_t flex_uint8_t;$/;"	t	file:
flex_uint8_t	lex.c	/^typedef unsigned char flex_uint8_t; $/;"	t	file:
font_ascent	../lib/fontlist.c	/^  int font_ascent;		\/* the font's ascent (from bounding box) *\/$/;"	m	struct:plPCLFontInfoStruct	file:
font_ascent	../lib/fontlist.c	/^  int font_ascent;		\/* the font's ascent (from bounding box) *\/$/;"	m	struct:plPSFontInfoStruct	file:
font_ascent	../lib/fontlist.c	/^  int font_ascent;		\/* the font's ascent (from bounding box) *\/$/;"	m	struct:plStickFontInfoStruct	file:
font_cap_height	../lib/fontlist.c	/^  int font_cap_height;		\/* the font's cap height *\/$/;"	m	struct:plPCLFontInfoStruct	file:
font_cap_height	../lib/fontlist.c	/^  int font_cap_height;		\/* the font's cap height *\/$/;"	m	struct:plPSFontInfoStruct	file:
font_descent	../lib/fontlist.c	/^  int font_descent;		\/* the font's descent (from bounding box) *\/$/;"	m	struct:plPCLFontInfoStruct	file:
font_descent	../lib/fontlist.c	/^  int font_descent;		\/* the font's descent (from bounding box) *\/$/;"	m	struct:plPSFontInfoStruct	file:
font_descent	../lib/fontlist.c	/^  int font_descent;		\/* the font's descent (from bounding box) *\/$/;"	m	struct:plStickFontInfoStruct	file:
font_index	../lib/fontlist.c	/^  int font_index;		\/* which font within typeface this is *\/$/;"	m	struct:plHersheyFontInfoStruct	file:
font_index	../lib/fontlist.c	/^  int font_index;		\/* which font within typeface this is *\/$/;"	m	struct:plPCLFontInfoStruct	file:
font_index	../lib/fontlist.c	/^  int font_index;		\/* which font within typeface this is *\/$/;"	m	struct:plPSFontInfoStruct	file:
font_index	../lib/fontlist.c	/^  int font_index;		\/* which font within typeface this is *\/$/;"	m	struct:plStickFontInfoStruct	file:
font_x_height	../lib/fontlist.c	/^  int font_x_height;		\/* the font's x height *\/$/;"	m	struct:plPCLFontInfoStruct	file:
font_x_height	../lib/fontlist.c	/^  int font_x_height;		\/* the font's x height *\/$/;"	m	struct:plPSFontInfoStruct	file:
formalargs	gram.y	/^formalargs	: \/* empty *\/ { $$ = NULL; }$/;"	l
fptrap	float.c	/^fptrap (int sig)$/;"	f
free	../lib/alloca.c	44;"	d	file:
fsp	global.c	/^struct	sym	*fsp	= NULL;$/;"	v	typeref:struct:sym
fwd	global.c	/^int	fwd;$/;"	v
getopt_long	../lib/getopt1.c	/^getopt_long (int argc, char *const *argv, const char *options, $/;"	f
getopt_long_only	../lib/getopt1.c	/^getopt_long_only (int argc, char *const *argv, const char *options,$/;"	f
gnu_getopt	../lib/getopt.c	/^gnu_getopt (int argc, char *const *argv, const char *optstring)$/;"	f
h	../lib/alloca.c	/^    } h;$/;"	m	union:hdr	typeref:struct:hdr::__anon5	file:
hdr	../lib/alloca.c	/^typedef union hdr$/;"	u	file:
header	../lib/alloca.c	/^} header;$/;"	t	typeref:union:hdr	file:
hflag	global.c	/^bool     eflag = false, rflag = false, hflag = false, conflag = false;$/;"	v
hidden_options	main.c	/^int hidden_options[] = { 0 };$/;"	v
hierror	stperr.c	/^hierror (void) \/* not enough accuracy *\/$/;"	f
high_water	../lib/alloca.c	/^    long high_water;		\/* Stack high-water mark.  *\/$/;"	m	struct:stk_stat	file:
hits	../lib/alloca.c	/^    long hits;			\/* Number of internal buffer hits.  *\/$/;"	m	struct:stk_stat	file:
hmax	global.c	/^double	hmax	= HMAX;$/;"	v
hmin	global.c	/^double	hmin	= HMIN;$/;"	v
hpgl_charset_lower	../lib/fontlist.c	/^  int hpgl_charset_lower;	\/* old HP character set number (lower half) *\/$/;"	m	struct:plStickFontInfoStruct	file:
hpgl_charset_upper	../lib/fontlist.c	/^  int hpgl_charset_upper;	\/* old HP character set number (upper half) *\/$/;"	m	struct:plStickFontInfoStruct	file:
hpgl_posture	../lib/fontlist.c	/^  int hpgl_posture;		\/* 0=upright, 1=italic, etc. *\/$/;"	m	struct:plPCLFontInfoStruct	file:
hpgl_posture	../lib/fontlist.c	/^  int hpgl_posture;		\/* 0=upright, 1=italic, etc. *\/$/;"	m	struct:plPSFontInfoStruct	file:
hpgl_posture	../lib/fontlist.c	/^  int hpgl_posture;		\/* 0=upright, 1=italic, etc. *\/$/;"	m	struct:plStickFontInfoStruct	file:
hpgl_spacing	../lib/fontlist.c	/^  int hpgl_spacing;		\/* 0=fixed width, 1=variable *\/$/;"	m	struct:plPCLFontInfoStruct	file:
hpgl_spacing	../lib/fontlist.c	/^  int hpgl_spacing;		\/* 0=fixed width, 1=variable *\/$/;"	m	struct:plPSFontInfoStruct	file:
hpgl_spacing	../lib/fontlist.c	/^  int hpgl_spacing;		\/* 0=fixed width, 1=variable *\/$/;"	m	struct:plStickFontInfoStruct	file:
hpgl_stroke_weight	../lib/fontlist.c	/^  int hpgl_stroke_weight;	\/* 0=normal, 3=bold, 4=extra bold, etc. *\/$/;"	m	struct:plPCLFontInfoStruct	file:
hpgl_stroke_weight	../lib/fontlist.c	/^  int hpgl_stroke_weight;	\/* 0=normal, 3=bold, 4=extra bold, etc. *\/$/;"	m	struct:plPSFontInfoStruct	file:
hpgl_stroke_weight	../lib/fontlist.c	/^  int hpgl_stroke_weight;	\/* 0=normal, 3=bold, 4=extra bold, etc. *\/$/;"	m	struct:plStickFontInfoStruct	file:
hpgl_symbol_set	../lib/fontlist.c	/^  int hpgl_symbol_set;		\/* 0=Roman-8, 14=ISO-8859-1 *\/$/;"	m	struct:plStickFontInfoStruct	file:
hpgl_symbol_set	../lib/fontlist.c	/^  int hpgl_symbol_set;		\/* 0=Roman-8, 14=ISO-8859-1, etc. *\/$/;"	m	struct:plPCLFontInfoStruct	file:
hpgl_symbol_set	../lib/fontlist.c	/^  int hpgl_symbol_set;		\/* 0=Roman-8, 14=ISO-8859-1, etc. *\/$/;"	m	struct:plPSFontInfoStruct	file:
i00afunc	../lib/alloca.c	/^i00afunc (long *address)$/;"	f	file:
i00afunc	../lib/alloca.c	/^i00afunc (long address)$/;"	f	file:
ibeta	specfun.c	/^ibeta (double a, double b, double x)$/;"	f
igamma	specfun.c	/^igamma (double a, double x)$/;"	f
initial_address	../lib/alloca.c	/^    long initial_address;	\/* Address of initial segment.  *\/$/;"	m	struct:stk_stat	file:
initial_size	../lib/alloca.c	/^    long initial_size;		\/* Size of initial segment.  *\/$/;"	m	struct:stk_stat	file:
integration_type	ode.h	/^} integration_type;$/;"	t	typeref:enum:__anon4
intpr	stperr.c	/^intpr (double t)$/;"	f
inverf	specfun.c	/^inverf (double p)		\/* Inverse Error Function *\/$/;"	f
invnorm	specfun.c	/^invnorm (double p)		\/* Inverse Normal Probability Function *\/$/;"	f
iso8859_1	../lib/fontlist.c	/^  bool iso8859_1;		\/* encoding is iso8859-1? (after reencoding) *\/$/;"	m	struct:plStickFontInfoStruct	file:
iso8859_1	../lib/fontlist.c	/^  bool iso8859_1;		\/* whether font encoding is iso8859-1 *\/$/;"	m	struct:plHersheyFontInfoStruct	file:
iso8859_1	../lib/fontlist.c	/^  bool iso8859_1;		\/* whether font encoding is iso8859-1 *\/$/;"	m	struct:plPCLFontInfoStruct	file:
iso8859_1	../lib/fontlist.c	/^  bool iso8859_1;		\/* whether font encoding is iso8859-1 *\/$/;"	m	struct:plPSFontInfoStruct	file:
it	global.c	/^long	it	= 0;$/;"	v
items	ode.h	/^	void **items;$/;"	m	struct:pstack
j0	bessel.c	/^j0 (double x)$/;"	f
j1	bessel.c	/^j1 (double x)$/;"	f
jn	bessel.c	/^jn (int n, double x) $/;"	f
jone	bessel.c	/^jone (double x)$/;"	f	file:
jzero	bessel.c	/^jzero (double x)$/;"	f
kerning_table_lower	../lib/fontlist.c	/^  int kerning_table_lower;	\/* number of a kerning table (lower half) *\/$/;"	m	struct:plStickFontInfoStruct	file:
kerning_table_upper	../lib/fontlist.c	/^  int kerning_table_upper;	\/* number of a kerning table (upper half) *\/$/;"	m	struct:plStickFontInfoStruct	file:
lalloc	lex.c	/^lalloc (void)$/;"	f
last_alloca_header	../lib/alloca.c	/^static header *last_alloca_header = NULL;	\/* -> last alloca header.  *\/$/;"	v	file:
last_nonopt	../lib/getopt.c	/^static int last_nonopt;$/;"	v	file:
lex	ode.h	/^struct lex $/;"	s
lexptr	gram.c	/^        struct  lex     *lexptr;$/;"	m	union:YYSTYPE	typeref:struct:YYSTYPE::lex	file:
lexptr	gram.h	/^        struct  lex     *lexptr;$/;"	m	union:YYSTYPE	typeref:struct:YYSTYPE::lex
lfree	lex.c	/^lfree (struct lex *lp)$/;"	f
lgamneg	specfun.c	/^lgamneg (double z)$/;"	f	file:
lgampos	specfun.c	/^lgampos (double z)$/;"	f	file:
link	../lib/alloca.c	/^    long link;			\/* Address of trailer block of previous$/;"	m	struct:stk_trailer	file:
list_fonts	../lib/fontlist.c	/^list_fonts (const char *output_format, const char *progname)$/;"	f
long_options	main.c	/^struct option long_options[] =$/;"	v	typeref:struct:option
lookup	sym.c	/^lookup (const char *nam)$/;"	f
lowerror	stperr.c	/^lowerror (void) \/* more than enough accuracy *\/$/;"	f
lx_lino	ode.h	/^  int	lx_lino;$/;"	m	struct:lex
lx_u	ode.h	/^    }	lx_u;$/;"	m	struct:lex	typeref:union:lex::__anon2
lxu_name	ode.h	/^      char    lxu_name[NAMMAX];$/;"	m	union:lex::__anon2
lxu_value	ode.h	/^      double  lxu_value;$/;"	m	union:lex::__anon2
main	main.c	/^main (int argc, char *argv[])$/;"	f
mark	global.c	/^jmp_buf mark;$/;"	v
matherr	misc.c	/^matherr (struct __exception *x)$/;"	f
maxc	../lib/alloca.c	/^    long maxc;			\/* Amount of contiguous space which would$/;"	m	struct:stk_stat	file:
maxerr	stperr.c	/^maxerr (void)$/;"	f
maxs	../lib/alloca.c	/^    long maxs;			\/* Maximum number of stack segments so far.  *\/$/;"	m	struct:stk_stat	file:
maxsize	ode.h	/^	int maxsize;$/;"	m	struct:pstack
name	../lib/fontlist.c	/^  const char *name;		\/* font name *\/$/;"	m	struct:plHersheyFontInfoStruct	file:
newstack	stack.c	/^void * newstack()$/;"	f
next	../lib/alloca.c	/^      union hdr *next;		\/* For chaining headers.  *\/$/;"	m	struct:hdr::__anon5	typeref:union:hdr::__anon5::hdr	file:
nextchar	../lib/getopt.c	/^static char *nextchar;$/;"	v	file:
norm	specfun.c	/^norm (double x)			\/* Normal or Gaussian Probability Function *\/$/;"	f
now	../lib/alloca.c	/^    long now;			\/* Current total stack size.  *\/$/;"	m	struct:stk_stat	file:
obliquing	../lib/fontlist.c	/^  bool obliquing;		\/* whether to apply obliquing *\/$/;"	m	struct:plHersheyFontInfoStruct	file:
obliquing	../lib/fontlist.c	/^  bool obliquing;		\/* whether to apply obliquing *\/$/;"	m	struct:plStickFontInfoStruct	file:
offset	../lib/fontlist.c	/^  int offset;			\/* left edge (applies to all chars) *\/$/;"	m	struct:plStickFontInfoStruct	file:
offset	../lib/fontlist.c	/^  short offset[256];		\/* per-character left edge information *\/$/;"	m	struct:plPCLFontInfoStruct	file:
offset	../lib/fontlist.c	/^  short offset[256];		\/* per-character left edge information *\/$/;"	m	struct:plPSFontInfoStruct	file:
op_type	ode.h	/^} op_type;$/;"	t	typeref:enum:__anon3
optarg	../lib/getopt.c	/^char *optarg = NULL;$/;"	v
opterr	../lib/getopt.c	/^int opterr = 1;$/;"	v
optevery	gram.y	/^optevery        : \/* empty *\/$/;"	l
optfrom	gram.y	/^optfrom         : \/* empty *\/$/;"	l
optind	../lib/getopt.c	/^int optind = 0;$/;"	v
optopt	../lib/getopt.c	/^int optopt = '?';$/;"	v
ordering	../lib/getopt.c	/^} ordering;$/;"	v	typeref:enum:__anon6	file:
orig_name	../lib/fontlist.c	/^  const char *orig_name;	\/* Allen Hershey's original name for it *\/$/;"	m	struct:plHersheyFontInfoStruct	file:
othername	../lib/fontlist.c	/^  const char *othername;	\/* an alias (for backward compatibility) *\/$/;"	m	struct:plHersheyFontInfoStruct	file:
overflows	../lib/alloca.c	/^    long overflows;		\/* Number of stack overflow ($STKOFEN) calls.  *\/$/;"	m	struct:stk_stat	file:
pad_size	../lib/alloca.c	/^    long pad_size;		\/* Stack pad size.  *\/$/;"	m	struct:stk_stat	file:
palloc	prt.c	/^palloc (void)$/;"	f
panic	misc.c	/^panic (const char *s)$/;"	f
panicn	misc.c	/^panicn (const char *fmt, int n)$/;"	f
pcl_typeface	../lib/fontlist.c	/^  int pcl_typeface;		\/* the PCL typeface number *\/$/;"	m	struct:plPCLFontInfoStruct	file:
pcl_typeface	../lib/fontlist.c	/^  int pcl_typeface;		\/* the PCL typeface number *\/$/;"	m	struct:plPSFontInfoStruct	file:
pcl_typeface	../lib/fontlist.c	/^  int pcl_typeface;		\/* the PCL typeface number *\/$/;"	m	struct:plStickFontInfoStruct	file:
pflag	global.c	/^bool     tflag = false, pflag = false, sflag = false;$/;"	v
pfree	prt.c	/^pfree (struct prt *pp)$/;"	f
pjone	bessel.c	/^static const double pjone[9] = $/;"	v	file:
pjzero	bessel.c	/^static const double pjzero[9] = $/;"	v	file:
plHersheyFontInfoStruct	../lib/fontlist.c	/^struct plHersheyFontInfoStruct $/;"	s	file:
plPCLFontInfoStruct	../lib/fontlist.c	/^struct plPCLFontInfoStruct$/;"	s	file:
plPSFontInfoStruct	../lib/fontlist.c	/^struct plPSFontInfoStruct$/;"	s	file:
plStickFontInfoStruct	../lib/fontlist.c	/^struct plStickFontInfoStruct $/;"	s	file:
pone	bessel.c	/^pone (double x)$/;"	f	file:
pop	stack.c	/^void * pop(struct pstack *s)$/;"	f
ppone	bessel.c	/^static const double ppone[6] = $/;"	v	file:
ppzero	bessel.c	/^static const double ppzero[6] = $/;"	v	file:
pqone	bessel.c	/^static const double pqone[6] = $/;"	v	file:
pqueue	global.c	/^struct	prt	*pqueue = NULL;$/;"	v	typeref:struct:prt
pqzero	bessel.c	/^static const double pqzero[6] = $/;"	v	file:
pr_link	ode.h	/^  struct prt  *pr_link;$/;"	m	struct:prt	typeref:struct:prt::prt
pr_sym	ode.h	/^  struct sym  *pr_sym;$/;"	m	struct:prt	typeref:struct:prt::sym
pr_which	ode.h	/^  ent_cell    pr_which;		\/* which cell to print *\/$/;"	m	struct:prt
prec	global.c	/^int	prec	= -1;$/;"	v
prerr	global.c	/^bool printnum, prerr;$/;"	v
prexq	gram.c	/^prexq (const struct expr *ep)$/;"	f
printnum	global.c	/^bool printnum, prerr;$/;"	v
printq	misc.c	/^printq (void)$/;"	f
progname	global.c	/^const char    *progname	= "ode"; \/* name of this program *\/$/;"	v
program	gram.y	/^program         : stat$/;"	l
prsymtab	expr.c	/^void prsymtab()$/;"	f
prt	ode.h	/^struct prt $/;"	s
prtitem	gram.y	/^prtitem         : IDENT prttag$/;"	l
prtlist	gram.y	/^prtlist         : prtitem$/;"	l
prtptr	gram.c	/^        struct  prt     *prtptr;$/;"	m	union:YYSTYPE	typeref:struct:YYSTYPE::prt	file:
prtptr	gram.h	/^        struct  prt     *prtptr;$/;"	m	union:YYSTYPE	typeref:struct:YYSTYPE::prt
prttag	gram.y	/^prttag          : \/* empty *\/$/;"	l
prval	misc.c	/^prval (double x)$/;"	f
ps_name	../lib/fontlist.c	/^  const char *ps_name;		\/* the postscript font name *\/$/;"	m	struct:plPCLFontInfoStruct	file:
ps_name	../lib/fontlist.c	/^  const char *ps_name;		\/* the postscript font name *\/$/;"	m	struct:plPSFontInfoStruct	file:
ps_name	../lib/fontlist.c	/^  const char *ps_name;		\/* the postscript font name *\/$/;"	m	struct:plStickFontInfoStruct	file:
ps_name_alt	../lib/fontlist.c	/^  const char *ps_name_alt;	\/* alternative PS font name, if non-NULL *\/$/;"	m	struct:plPCLFontInfoStruct	file:
ps_name_alt	../lib/fontlist.c	/^  const char *ps_name_alt;	\/* alternative PS font name, if non-NULL *\/$/;"	m	struct:plPSFontInfoStruct	file:
ps_name_alt2	../lib/fontlist.c	/^  const char *ps_name_alt2;	\/* 2nd alternative PS font name, if non-NULL *\/$/;"	m	struct:plPSFontInfoStruct	file:
pstack	ode.h	/^struct pstack {$/;"	s
push	stack.c	/^struct pstack * push(struct pstack *s, void* d)$/;"	f
pyone	bessel.c	/^static const double pyone[8] = $/;"	v	file:
pyzero	bessel.c	/^static const double pyzero[9] = $/;"	v	file:
pzero	bessel.c	/^pzero (double x)$/;"	f	file:
qjone	bessel.c	/^static const double qjone[9] = $/;"	v	file:
qjzero	bessel.c	/^static const double qjzero[9] = $/;"	v	file:
qone	bessel.c	/^qone (double x)$/;"	f	file:
qpone	bessel.c	/^static const double qpone[6] = $/;"	v	file:
qpzero	bessel.c	/^static const double qpzero[6] = $/;"	v	file:
qqone	bessel.c	/^static const double qqone[6] = $/;"	v	file:
qqzero	bessel.c	/^static const double qqzero[6] = $/;"	v	file:
qyone	bessel.c	/^static const double qyone[9] = $/;"	v	file:
qyzero	bessel.c	/^static const double qyzero[9] = $/;"	v	file:
qzero	bessel.c	/^qzero (double x)$/;"	f	file:
raster_height_lower	../lib/fontlist.c	/^  int raster_height_lower;	\/* height of abstract raster (lower half) *\/$/;"	m	struct:plStickFontInfoStruct	file:
raster_height_upper	../lib/fontlist.c	/^  int raster_height_upper;	\/* height of abstract raster (upper half) *\/$/;"	m	struct:plStickFontInfoStruct	file:
raster_width_lower	../lib/fontlist.c	/^  int raster_width_lower;	\/* width of abstract raster (lower half) *\/$/;"	m	struct:plStickFontInfoStruct	file:
raster_width_upper	../lib/fontlist.c	/^  int raster_width_upper;	\/* width of abstract raster (upper half) *\/$/;"	m	struct:plStickFontInfoStruct	file:
replace_bound_vars	expr.c	/^replace_bound_vars(struct expr *ep)$/;"	f
resetflt	float.c	/^resetflt (void)$/;"	f
resize	stack.c	/^void resize( struct pstack *s)$/;"	f
rflag	global.c	/^bool     eflag = false, rflag = false, hflag = false, conflag = false;$/;"	v
rk	rk.c	/^rk (void)$/;"	f
rka	rka.c	/^rka (void)$/;"	f
rterror	misc.c	/^rterror (const char *s)$/;"	f
rterrors	misc.c	/^rterrors (const char *fmt, const char *s)$/;"	f
rtsquawks	misc.c	/^rtsquawks (const char *fmt, const char *s)$/;"	f
salloc	sym.c	/^salloc (void)$/;"	f
sawevery	global.c	/^bool	    sawevery = false, sawfrom = false;$/;"	v
sawfrom	global.c	/^bool	    sawevery = false, sawfrom = false;$/;"	v
sawprint	global.c	/^bool     sawstep = false, sawprint = false;$/;"	v
sawstep	global.c	/^bool     sawstep = false, sawprint = false;$/;"	v
segments	../lib/alloca.c	/^    long segments;		\/* Current number of stack segments.  *\/$/;"	m	struct:stk_stat	file:
setflt	float.c	/^setflt (void)$/;"	f
sflag	global.c	/^bool     tflag = false, pflag = false, sflag = false;$/;"	v
sfree	sym.c	/^sfree (struct sym *sp)$/;"	f
shaseg	../lib/alloca.c	/^    long shaseg:32;		\/* Size of increments to stack.  *\/$/;"	m	struct:stack_control_header	file:
shgrow	../lib/alloca.c	/^    long shgrow:32;		\/* Number of times stack has grown.  *\/$/;"	m	struct:stack_control_header	file:
shhwm	../lib/alloca.c	/^    long shhwm:32;		\/* High water mark of stack.  *\/$/;"	m	struct:stack_control_header	file:
short	gram.c	307;"	d	file:
shsize	../lib/alloca.c	/^    long shsize:32;		\/* Current size of stack (all segments).  *\/$/;"	m	struct:stack_control_header	file:
simple	gram.c	/^        int     simple;$/;"	m	union:YYSTYPE	file:
simple	gram.h	/^        int     simple;$/;"	m	union:YYSTYPE
size	ode.h	/^	int size;$/;"	m	struct:pstack
solve	misc.c	/^solve (void)$/;"	f
spaces	../lib/fontlist.c	/^static char spaces[MAX_FONTNAME_LEN+1] = "                                   ";$/;"	v	file:
sqfree	sym.c	/^sqfree (struct sym *sp)$/;"	f
ss	../lib/alloca.c	/^    long ss[0200];		\/* 0200 overflow words.  *\/$/;"	m	struct:stack_segment_linkage	file:
ssa0	../lib/alloca.c	/^    long ssa0;$/;"	m	struct:stack_segment_linkage	file:
ssa1	../lib/alloca.c	/^    long ssa1;$/;"	m	struct:stack_segment_linkage	file:
ssa2	../lib/alloca.c	/^    long ssa2;$/;"	m	struct:stack_segment_linkage	file:
ssa3	../lib/alloca.c	/^    long ssa3;$/;"	m	struct:stack_segment_linkage	file:
ssa4	../lib/alloca.c	/^    long ssa4;$/;"	m	struct:stack_segment_linkage	file:
ssa5	../lib/alloca.c	/^    long ssa5;$/;"	m	struct:stack_segment_linkage	file:
ssa6	../lib/alloca.c	/^    long ssa6;$/;"	m	struct:stack_segment_linkage	file:
ssa7	../lib/alloca.c	/^    long ssa7;$/;"	m	struct:stack_segment_linkage	file:
ssbase	../lib/alloca.c	/^    long ssbase:32;		\/* Offset to stack base.  *\/$/;"	m	struct:stack_segment_linkage	file:
sscray	../lib/alloca.c	/^    long sscray[7];		\/* Reserved for Cray Research.  *\/$/;"	m	struct:stack_segment_linkage	file:
sscsnm	../lib/alloca.c	/^    long sscsnm;		\/* Private control structure number for$/;"	m	struct:stack_segment_linkage	file:
ssemax	stperr.c	/^static double   ssemax, abemax, acemax;$/;"	v	file:
ssenam	stperr.c	/^static char     *ssenam, *abenam, *acenam;$/;"	v	file:
ssgvup	../lib/alloca.c	/^    long ssgvup;		\/* Pointer to multitasking thread giveup.  *\/$/;"	m	struct:stack_segment_linkage	file:
ssmax	global.c	/^double	ssmax	= 1e-8;$/;"	v
ssmin	global.c	/^double	ssmin	= 1e-11;$/;"	v
sspseg	../lib/alloca.c	/^    long sspseg:32;		\/* Offset to linkage control of previous$/;"	m	struct:stack_segment_linkage	file:
sss0	../lib/alloca.c	/^    long sss0;$/;"	m	struct:stack_segment_linkage	file:
sss1	../lib/alloca.c	/^    long sss1;$/;"	m	struct:stack_segment_linkage	file:
sss2	../lib/alloca.c	/^    long sss2;$/;"	m	struct:stack_segment_linkage	file:
sss3	../lib/alloca.c	/^    long sss3;$/;"	m	struct:stack_segment_linkage	file:
sss4	../lib/alloca.c	/^    long sss4;$/;"	m	struct:stack_segment_linkage	file:
sss5	../lib/alloca.c	/^    long sss5;$/;"	m	struct:stack_segment_linkage	file:
sss6	../lib/alloca.c	/^    long sss6;$/;"	m	struct:stack_segment_linkage	file:
sss7	../lib/alloca.c	/^    long sss7;$/;"	m	struct:stack_segment_linkage	file:
sssize	../lib/alloca.c	/^    long sssize:32;		\/* Number of words in this segment.  *\/$/;"	m	struct:stack_segment_linkage	file:
sstcpt	../lib/alloca.c	/^    long sstcpt:32;		\/* Pointer to task common address block.  *\/$/;"	m	struct:stack_segment_linkage	file:
sstpid	../lib/alloca.c	/^    long sstpid;		\/* Process ID for pid based multi-tasking.  *\/$/;"	m	struct:stack_segment_linkage	file:
ssusr1	../lib/alloca.c	/^    long ssusr1;		\/* Reserved for user.  *\/$/;"	m	struct:stack_segment_linkage	file:
ssusr2	../lib/alloca.c	/^    long ssusr2;		\/* Reserved for user.  *\/$/;"	m	struct:stack_segment_linkage	file:
stack	expr.c	/^double stack[NSTACK];$/;"	v
stack_control_header	../lib/alloca.c	/^struct stack_control_header$/;"	s	file:
stack_dir	../lib/alloca.c	/^static int stack_dir;		\/* 1 or -1 once known.  *\/$/;"	v	file:
stack_segment_linkage	../lib/alloca.c	/^struct stack_segment_linkage$/;"	s	file:
startstep	misc.c	/^startstep (void)$/;"	f
stat	gram.y	/^stat            : SEP$/;"	l
stk_stat	../lib/alloca.c	/^struct stk_stat$/;"	s	file:
stk_trailer	../lib/alloca.c	/^struct stk_trailer$/;"	s	file:
stkm_free	../lib/alloca.c	/^    long stkm_free;		\/* Number of deallocations by $STKMRET.  *\/$/;"	m	struct:stk_stat	file:
stko_free	../lib/alloca.c	/^    long stko_free;		\/* Number of deallocations by $STKRETN.  *\/$/;"	m	struct:stk_stat	file:
stko_mallocs	../lib/alloca.c	/^    long stko_mallocs;		\/* Block allocations by $STKOFEN.  *\/$/;"	m	struct:stk_stat	file:
strerror	../lib/compat.c	/^strerror (int errnum)$/;"	f
substitute_ps_name	../lib/fontlist.c	/^  const char *substitute_ps_name; \/* replacement name (for use in a PS file) *\/$/;"	m	struct:plPCLFontInfoStruct	file:
sy_aberr	ode.h	/^  double  sy_aberr;		\/* absolute single step error *\/$/;"	m	struct:sym
sy_acerr	ode.h	/^  double  sy_acerr;		\/* accumulated error *\/$/;"	m	struct:sym
sy_expr	ode.h	/^  struct  expr    *sy_expr;$/;"	m	struct:sym	typeref:struct:sym::expr
sy_flags	ode.h	/^  int     sy_flags;$/;"	m	struct:sym
sy_k	ode.h	/^  double  sy_k[KMAX];$/;"	m	struct:sym
sy_link	ode.h	/^  struct  sym     *sy_link;$/;"	m	struct:sym	typeref:struct:sym::sym
sy_name	ode.h	/^  char    sy_name[NAMMAX];$/;"	m	struct:sym
sy_predi	ode.h	/^  double  sy_predi;		\/* predictor value *\/$/;"	m	struct:sym
sy_pri	ode.h	/^  double  sy_pri[PASTMAX];$/;"	m	struct:sym
sy_prime	ode.h	/^  double  sy_prime;$/;"	m	struct:sym
sy_sserr	ode.h	/^  double  sy_sserr;		\/* relative single step error *\/$/;"	m	struct:sym
sy_val	ode.h	/^  double  sy_val[PASTMAX];$/;"	m	struct:sym
sy_value	ode.h	/^  double  sy_value;$/;"	m	struct:sym
sym	ode.h	/^struct sym $/;"	s
symptr	gram.c	/^        struct  sym     *symptr;$/;"	m	union:YYSTYPE	typeref:struct:YYSTYPE::sym	file:
symptr	gram.h	/^        struct  sym     *symptr;$/;"	m	union:YYSTYPE	typeref:struct:YYSTYPE::sym
symtab	global.c	/^struct	sym	*symtab = NULL;$/;"	v	typeref:struct:sym
tevery	global.c	/^int     tevery;$/;"	v
tflag	global.c	/^bool     tflag = false, pflag = false, sflag = false;$/;"	v
tfrom	global.c	/^double  tstart, tstop, tstep, tfrom;$/;"	v
this_address	../lib/alloca.c	/^    long this_address;		\/* Address of this block.  *\/$/;"	m	struct:stk_trailer	file:
this_size	../lib/alloca.c	/^    long this_size;		\/* Size of this block (does not include$/;"	m	struct:stk_trailer	file:
title	misc.c	/^title (void)$/;"	f
top	stack.c	/^void * top(struct pstack *s)$/;"	f
trivial	eu.c	/^trivial (void)$/;"	f
tstart	global.c	/^double  tstart, tstop, tstep, tfrom;$/;"	v
tstep	global.c	/^double  tstart, tstop, tstep, tfrom;$/;"	v
tstop	global.c	/^double  tstart, tstop, tstep, tfrom;$/;"	v
typeface_index	../lib/fontlist.c	/^  int typeface_index;		\/* default typeface for the font *\/$/;"	m	struct:plHersheyFontInfoStruct	file:
typeface_index	../lib/fontlist.c	/^  int typeface_index;		\/* default typeface for the font *\/$/;"	m	struct:plPCLFontInfoStruct	file:
typeface_index	../lib/fontlist.c	/^  int typeface_index;		\/* default typeface for the font *\/$/;"	m	struct:plPSFontInfoStruct	file:
typeface_index	../lib/fontlist.c	/^  int typeface_index;		\/* default typeface for the font *\/$/;"	m	struct:plStickFontInfoStruct	file:
underflows	../lib/alloca.c	/^    long underflows;		\/* Number of stack underflow calls ($STKRETN).  *\/$/;"	m	struct:stk_stat	file:
unknown10	../lib/alloca.c	/^    long unknown10;$/;"	m	struct:stk_trailer	file:
unknown11	../lib/alloca.c	/^    long unknown11;$/;"	m	struct:stk_trailer	file:
unknown12	../lib/alloca.c	/^    long unknown12;$/;"	m	struct:stk_trailer	file:
unknown13	../lib/alloca.c	/^    long unknown13;$/;"	m	struct:stk_trailer	file:
unknown14	../lib/alloca.c	/^    long unknown14;$/;"	m	struct:stk_trailer	file:
unknown2	../lib/alloca.c	/^    long unknown2;$/;"	m	struct:stk_trailer	file:
unknown3	../lib/alloca.c	/^    long unknown3;$/;"	m	struct:stk_trailer	file:
unknown5	../lib/alloca.c	/^    long unknown5;$/;"	m	struct:stk_trailer	file:
unknown6	../lib/alloca.c	/^    long unknown6;$/;"	m	struct:stk_trailer	file:
unknown7	../lib/alloca.c	/^    long unknown7;$/;"	m	struct:stk_trailer	file:
unknown8	../lib/alloca.c	/^    long unknown8;$/;"	m	struct:stk_trailer	file:
unknown9	../lib/alloca.c	/^    long unknown9;$/;"	m	struct:stk_trailer	file:
unput	lex.c	188;"	d	file:
visible	../lib/fontlist.c	/^  bool visible;			\/* whether font is visible, i.e. not internal *\/$/;"	m	struct:plHersheyFontInfoStruct	file:
width	../lib/fontlist.c	/^  char width[256];		\/* per-character width information *\/$/;"	m	struct:plStickFontInfoStruct	file:
width	../lib/fontlist.c	/^  short width[256];		\/* per-character width information *\/$/;"	m	struct:plPCLFontInfoStruct	file:
width	../lib/fontlist.c	/^  short width[256];		\/* per-character width information *\/$/;"	m	struct:plPSFontInfoStruct	file:
written	global.c	/^const char    *written =  "Written by Nicholas B. Tufillaro and Robert S. Maier.";$/;"	v
x_name	../lib/fontlist.c	/^  const char *x_name;		\/* the X Windows font name *\/$/;"	m	struct:plPCLFontInfoStruct	file:
x_name	../lib/fontlist.c	/^  const char *x_name;		\/* the X Windows font name *\/$/;"	m	struct:plPSFontInfoStruct	file:
x_name_alt	../lib/fontlist.c	/^  const char *x_name_alt;	\/* alternative X Windows font name *\/$/;"	m	struct:plPSFontInfoStruct	file:
x_name_alt2	../lib/fontlist.c	/^  const char *x_name_alt2;	\/* 2nd alternative X Windows font name *\/$/;"	m	struct:plPSFontInfoStruct	file:
x_name_alt3	../lib/fontlist.c	/^  const char *x_name_alt3;	\/* 3rd alternative X Windows font name *\/$/;"	m	struct:plPSFontInfoStruct	file:
xcalloc	../lib/xmalloc.c	/^xcalloc (size_t nmemb, size_t size)$/;"	f
xmalloc	../lib/xmalloc.c	/^xmalloc (size_t length)$/;"	f
xrealloc	../lib/xmalloc.c	/^xrealloc (void * p, size_t length)$/;"	f
xstrdup	../lib/xstrdup.c	/^xstrdup (const char *s)$/;"	f
y0	bessel.c	/^y0 (double x)$/;"	f
y1	bessel.c	/^y1 (double x)$/;"	f
yn	bessel.c	/^yn (int n, double x) $/;"	f
yone	bessel.c	/^yone (double x)$/;"	f	file:
yy_accept	lex.c	/^static yyconst flex_int16_t yy_accept[165] =$/;"	v	file:
yy_acclist	lex.c	/^static yyconst flex_int16_t yy_acclist[238] =$/;"	v	file:
yy_at_bol	lex.c	/^	int yy_at_bol;$/;"	m	struct:yy_buffer_state	file:
yy_base	lex.c	/^static yyconst flex_int16_t yy_base[166] =$/;"	v	file:
yy_bs_column	lex.c	/^    int yy_bs_column; \/**< The column count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_bs_lineno	lex.c	/^    int yy_bs_lineno; \/**< The line count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_pos	lex.c	/^	char *yy_buf_pos;		\/* current position in input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_size	lex.c	/^	yy_size_t yy_buf_size;$/;"	m	struct:yy_buffer_state	file:
yy_buffer_stack	lex.c	/^static YY_BUFFER_STATE * yy_buffer_stack = 0; \/**< Stack as an array. *\/$/;"	v	file:
yy_buffer_stack_max	lex.c	/^static size_t yy_buffer_stack_max = 0; \/**< capacity of stack. *\/$/;"	v	file:
yy_buffer_stack_top	lex.c	/^static size_t yy_buffer_stack_top = 0; \/**< index of top of stack. *\/$/;"	v	file:
yy_buffer_state	lex.c	/^struct yy_buffer_state$/;"	s	file:
yy_buffer_status	lex.c	/^	int yy_buffer_status;$/;"	m	struct:yy_buffer_state	file:
yy_c_buf_p	lex.c	/^static char *yy_c_buf_p = (char *) 0;$/;"	v	file:
yy_ch_buf	lex.c	/^	char *yy_ch_buf;		\/* input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_chk	lex.c	/^static yyconst flex_int16_t yy_chk[270] =$/;"	v	file:
yy_create_buffer	lex.c	/^    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )$/;"	f
yy_def	lex.c	/^static yyconst flex_int16_t yy_def[166] =$/;"	v	file:
yy_delete_buffer	lex.c	/^    void yy_delete_buffer (YY_BUFFER_STATE  b )$/;"	f
yy_did_buffer_switch_on_eof	lex.c	/^static int yy_did_buffer_switch_on_eof;$/;"	v	file:
yy_ec	lex.c	/^static yyconst flex_int32_t yy_ec[256] =$/;"	v	file:
yy_fatal_error	lex.c	/^static void yy_fatal_error (yyconst char* msg )$/;"	f	file:
yy_fill_buffer	lex.c	/^	int yy_fill_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_flex_debug	lex.c	/^int yy_flex_debug = 0;$/;"	v
yy_flex_strlen	lex.c	/^static int yy_flex_strlen (yyconst char * s )$/;"	f	file:
yy_flex_strncpy	lex.c	/^static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )$/;"	f	file:
yy_flush_buffer	lex.c	/^    void yy_flush_buffer (YY_BUFFER_STATE  b )$/;"	f
yy_full_match	lex.c	/^static char *yy_full_match;$/;"	v	file:
yy_get_next_buffer	lex.c	/^static int yy_get_next_buffer (void)$/;"	f	file:
yy_get_previous_state	lex.c	/^    static yy_state_type yy_get_previous_state (void)$/;"	f	file:
yy_hold_char	lex.c	/^static char yy_hold_char;$/;"	v	file:
yy_init	lex.c	/^static int yy_init = 0;		\/* whether we need to initialize *\/$/;"	v	file:
yy_init_buffer	lex.c	/^    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )$/;"	f	file:
yy_init_globals	lex.c	/^static int yy_init_globals (void)$/;"	f	file:
yy_input_file	lex.c	/^	FILE *yy_input_file;$/;"	m	struct:yy_buffer_state	file:
yy_is_interactive	lex.c	/^	int yy_is_interactive;$/;"	m	struct:yy_buffer_state	file:
yy_is_our_buffer	lex.c	/^	int yy_is_our_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_load_buffer_state	lex.c	/^static void yy_load_buffer_state  (void)$/;"	f	file:
yy_lp	lex.c	/^static int yy_lp;$/;"	v	file:
yy_meta	lex.c	/^static yyconst flex_int32_t yy_meta[38] =$/;"	v	file:
yy_n_chars	lex.c	/^	int yy_n_chars;$/;"	m	struct:yy_buffer_state	file:
yy_n_chars	lex.c	/^static int yy_n_chars;		\/* number of characters read into yy_ch_buf *\/$/;"	v	file:
yy_new_buffer	lex.c	317;"	d	file:
yy_nxt	lex.c	/^	flex_int32_t yy_nxt;$/;"	m	struct:yy_trans_info	file:
yy_nxt	lex.c	/^static yyconst flex_int16_t yy_nxt[270] =$/;"	v	file:
yy_reduce_print	gram.c	/^yy_reduce_print (YYSTYPE *yyvsp, int yyrule)$/;"	f	file:
yy_scan_buffer	lex.c	/^YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )$/;"	f
yy_scan_bytes	lex.c	/^YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )$/;"	f
yy_scan_string	lex.c	/^YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )$/;"	f
yy_set_bol	lex.c	329;"	d	file:
yy_set_interactive	lex.c	319;"	d	file:
yy_size_t	lex.c	/^typedef size_t yy_size_t;$/;"	t	file:
yy_stack_print	gram.c	/^yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)$/;"	f	file:
yy_start	lex.c	/^static int yy_start = 0;	\/* start state number *\/$/;"	v	file:
yy_state_buf	lex.c	/^static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;$/;"	v	file:
yy_state_ptr	lex.c	/^static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;$/;"	v	file:
yy_state_type	lex.c	/^typedef int yy_state_type;$/;"	t	file:
yy_switch_to_buffer	lex.c	/^    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )$/;"	f
yy_symbol_print	gram.c	/^yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_symbol_value_print	gram.c	/^yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_trans_info	lex.c	/^struct yy_trans_info$/;"	s	file:
yy_try_NUL_trans	lex.c	/^    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )$/;"	f	file:
yy_verify	lex.c	/^	flex_int32_t yy_verify;$/;"	m	struct:yy_trans_info	file:
yyalloc	gram.c	/^union yyalloc$/;"	u	file:
yyalloc	lex.c	/^void *yyalloc (yy_size_t  size )$/;"	f
yychar	gram.c	/^int yychar;$/;"	v
yycheck	gram.c	/^static const yytype_int16 yycheck[] =$/;"	v	file:
yyclearin	gram.c	1086;"	d	file:
yyconst	lex.c	106;"	d	file:
yyconst	lex.c	108;"	d	file:
yydebug	gram.c	/^int yydebug;$/;"	v
yydefact	gram.c	/^static const yytype_uint8 yydefact[] =$/;"	v	file:
yydefgoto	gram.c	/^static const yytype_int16 yydefgoto[] =$/;"	v	file:
yydestruct	gram.c	/^yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)$/;"	f	file:
yyensure_buffer_stack	lex.c	/^static void yyensure_buffer_stack (void)$/;"	f	file:
yyerrok	gram.c	1085;"	d	file:
yyerror	gram.c	/^yyerror (const char *s)$/;"	f
yyfree	lex.c	/^void yyfree (void * ptr )$/;"	f
yyget_debug	lex.c	/^int yyget_debug  (void)$/;"	f
yyget_in	lex.c	/^FILE *yyget_in  (void)$/;"	f
yyget_leng	lex.c	/^int yyget_leng  (void)$/;"	f
yyget_lineno	lex.c	/^int yyget_lineno  (void)$/;"	f
yyget_out	lex.c	/^FILE *yyget_out  (void)$/;"	f
yyget_text	lex.c	/^char *yyget_text  (void)$/;"	f
yyin	lex.c	/^FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;$/;"	v
yyinput	lex.c	/^    static int yyinput (void)$/;"	f	file:
yyleng	lex.c	/^int yyleng;$/;"	v
yyless	lex.c	175;"	d	file:
yyless	lex.c	1983;"	d	file:
yyless	lex.c	1984;"	d	file:
yylex_destroy	lex.c	/^int yylex_destroy  (void)$/;"	f
yylineno	lex.c	/^int yylineno = 1;$/;"	v
yylval	gram.c	/^YYSTYPE yylval;$/;"	v
yymore	lex.c	596;"	d	file:
yynerrs	gram.c	/^int yynerrs;$/;"	v
yyout	lex.c	/^FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;$/;"	v
yypact	gram.c	/^static const yytype_int16 yypact[] =$/;"	v	file:
yyparse	gram.c	/^yyparse (void *YYPARSE_PARAM)$/;"	f
yypgoto	gram.c	/^static const yytype_int16 yypgoto[] =$/;"	v	file:
yypop_buffer_state	lex.c	/^void yypop_buffer_state (void)$/;"	f
yyprhs	gram.c	/^static const yytype_uint16 yyprhs[] =$/;"	v	file:
yypush_buffer_state	lex.c	/^void yypush_buffer_state (YY_BUFFER_STATE new_buffer )$/;"	f
yyr1	gram.c	/^static const yytype_uint8 yyr1[] =$/;"	v	file:
yyr2	gram.c	/^static const yytype_uint8 yyr2[] =$/;"	v	file:
yyrealloc	lex.c	/^void *yyrealloc  (void * ptr, yy_size_t  size )$/;"	f
yyrestart	lex.c	/^    void yyrestart  (FILE * input_file )$/;"	f
yyrhs	gram.c	/^static const yytype_int8 yyrhs[] =$/;"	v	file:
yyrline	gram.c	/^static const yytype_uint16 yyrline[] =$/;"	v	file:
yyset_debug	lex.c	/^void yyset_debug (int  bdebug )$/;"	f
yyset_in	lex.c	/^void yyset_in (FILE *  in_str )$/;"	f
yyset_lineno	lex.c	/^void yyset_lineno (int  line_number )$/;"	f
yyset_out	lex.c	/^void yyset_out (FILE *  out_str )$/;"	f
yyss_alloc	gram.c	/^  yytype_int16 yyss_alloc;$/;"	m	union:yyalloc	file:
yystos	gram.c	/^static const yytype_uint8 yystos[] =$/;"	v	file:
yystpcpy	gram.c	/^yystpcpy (char *yydest, const char *yysrc)$/;"	f	file:
yystpcpy	gram.c	1384;"	d	file:
yystrlen	gram.c	/^yystrlen (const char *yystr)$/;"	f	file:
yystrlen	gram.c	1361;"	d	file:
yystype	gram.c	295;"	d	file:
yystype	gram.h	152;"	d
yysyntax_error	gram.c	/^yysyntax_error (char *yyresult, int yystate, int yychar)$/;"	f	file:
yytable	gram.c	/^static const yytype_int16 yytable[] =$/;"	v	file:
yyterminate	lex.c	752;"	d	file:
yytext	lex.c	/^char *yytext;$/;"	v
yytext_ptr	lex.c	354;"	d	file:
yytname	gram.c	/^static const char *const yytname[] =$/;"	v	file:
yytnamerr	gram.c	/^yytnamerr (char *yyres, const char *yystr)$/;"	f	file:
yytokentype	gram.c	/^   enum yytokentype {$/;"	g	file:
yytokentype	gram.h	/^   enum yytokentype {$/;"	g
yytoknum	gram.c	/^static const yytype_uint16 yytoknum[] =$/;"	v	file:
yytranslate	gram.c	/^static const yytype_uint8 yytranslate[] =$/;"	v	file:
yytype_int16	gram.c	/^typedef YYTYPE_INT16 yytype_int16;$/;"	t	file:
yytype_int16	gram.c	/^typedef short int yytype_int16;$/;"	t	file:
yytype_int8	gram.c	/^typedef YYTYPE_INT8 yytype_int8;$/;"	t	file:
yytype_int8	gram.c	/^typedef short int yytype_int8;$/;"	t	file:
yytype_int8	gram.c	/^typedef signed char yytype_int8;$/;"	t	file:
yytype_uint16	gram.c	/^typedef YYTYPE_UINT16 yytype_uint16;$/;"	t	file:
yytype_uint16	gram.c	/^typedef unsigned short int yytype_uint16;$/;"	t	file:
yytype_uint8	gram.c	/^typedef YYTYPE_UINT8 yytype_uint8;$/;"	t	file:
yytype_uint8	gram.c	/^typedef unsigned char yytype_uint8;$/;"	t	file:
yyunput	lex.c	/^    static void yyunput (int c, register char * yy_bp )$/;"	f	file:
yyvs_alloc	gram.c	/^  YYSTYPE yyvs_alloc;$/;"	m	union:yyalloc	file:
yywrap	yywrap.c	/^yywrap (void)$/;"	f
yzero	bessel.c	/^yzero (double x)$/;"	f	file:
